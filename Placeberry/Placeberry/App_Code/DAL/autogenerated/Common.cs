//------------------------------------------------------------------------------
// <autogenerated>
//     Date:                20110602
//     Time:                15:57 
//     CodeSmith Version:   5.0.0.0
//     Template created by:	Vedran Kaldi (vedran@vkaldi.com)
//
//     Ovaj fajl je autogeneriran i ne smije se mijenjati!
//     
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections.Generic;

namespace Placeberry.DAL
{
    /// <summary>
    /// Common stvari za cijeli library - dohvacanje cnnstr, postavljanje cnnstr...
    /// </summary>
    public static partial class autogenerated_Common_dblibrary
    {
        /// <summary>
        /// Delegat koji se poziva kada se izvrsi neka storica (za tracing).
        /// Poziva se samo ako je <see cref="autogenerated_Common_dblibrary.EnableProfiling"/> == true.
        /// </summary>
        /// <param name="spName">Naziv storice</param>
        /// <param name="duration">Trajanje storice u milisekundama</param>
        public delegate void StoredProcedureEndDelegate(string spName, double duration);
        private static object sync = new object();
        private static string cnnstr = "";
        private static System.Transactions.IsolationLevel transactionIsolation = System.Transactions.IsolationLevel.ReadCommitted;

        /// <summary>
        /// Poziva se kada neka storica zavrsi sa izvrsavanjem.
        /// </summary>
        public static StoredProcedureEndDelegate StoredProcedureEnd;

        /// <summary>
        /// Da li je omoguceno profiliranje?
        /// Ako je, onda se pozivaju delegati koji javljaju da je storica pozvana, koliko je trajala itd...
        /// </summary>
        public static bool EnableProfiling = false;

        /// <summary>
        /// Postavljanje connection stringa za cijeli library (svaki poziv storice ce koristiti taj connection string).
        /// </summary>
        /// <param name="connectionString">Cnnstr koji ce se koristiti</param>
        public static void SetConnectionString(string connectionString)
        {
            lock (sync)
            {
                cnnstr = connectionString;
            }
        }

        /// <summary>
        /// Dohvacanje connection stringa.
        /// Ako connection string nije postavljen pozivom metode <see cref="SetConnectionString"/>, onda ga dohvacamo iz config fajla (prva konekcija koja je navedena u njemu).
        /// Ako ni connection string i dalje nemamo, dize se <see cref="ApplicationException"/> sa odgovarajucom porukom.
        /// </summary>
        /// <returns></returns>
        public static string GetConnectionString()
        {
            if (cnnstr == "")
            {
                // ako cnnstr nije postavljen, uzimamo ako postoji iz config fajla
                lock (sync)
                {
                    if (ConfigurationManager.ConnectionStrings != null && ConfigurationManager.ConnectionStrings.Count > 0)
                    {
                        cnnstr = ConfigurationManager.ConnectionStrings[0].ConnectionString;
                    }
                    else
                    {
                        throw new ApplicationException("Potrebno je podesiti connection string");
                    }
                }
            }

            return cnnstr;
        }

        /// <summary>
        /// Podesavanje isolation levela za sve konekcije globalno.
        /// Svaka konekcija moze overrajdati svoj isolation level.
        /// </summary>
        /// <param name="isolation"></param>
        public static void SetIsolationLevel(System.Transactions.IsolationLevel isolation)
        {
            transactionIsolation = isolation;
        }

        /// <summary>
        /// Dohvacanje globalnog isolation levela za sve konekcije.
        /// Svaka konekcija moze overrajdati svoj isolation level.
        /// </summary>
        /// <returns></returns>
        public static System.Transactions.IsolationLevel GetIsolationLevel()
        {
            return transactionIsolation;
        }
    }
}