<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Template za generiranje wrappera storice." %>
<%@ Property Name="SourceCommand" Type="SchemaExplorer.CommandSchema" Description="Storica za koju se kreira wrapper." %>
<%@ Property Name="GenerateDataContract" Default="False" Type="System.Boolean" Description="Da li se generira data contract za WCF?" %>
<%@ Property Name="TargetNamespace" Default="vkaldi" Type="System.String" Description="Namespace u koji ce se smjestiti klasa." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Transactions" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Data.SqlClient" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Transactions" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     Date:                <%= DateTime.Now.ToString("yyyyMMdd") %>
//     Time:                <%= DateTime.Now.ToString("HH:mm tt") %>
//     CodeSmith Version:   <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//     Template created by:	Vedran Kaldi (vedran@vkaldi.com)
//
//     Ovaj fajl je autogeneriran i ne smije se mijenjati!
//     
//     Wrapper klasa za storicu <%= SourceCommand.Name %>
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections.Generic;
using System.Runtime.Serialization;
using IsolationLevel = System.Transactions.IsolationLevel;
using System.Transactions;

namespace <%= TargetNamespace %> {
    /// <summary>
    /// Wrapper oko procedure <%= SourceCommand.Name %>.
    /// Za izvrsavanje koristiti Execute metodu.
    /// </summary>
    public static partial class <%= ClassName %> {
        /// <summary>
        /// Preko ove metode se izvrsava storica <%= SourceCommand.Name %>.
        <% switch (TipStorice()) { %>
        <% case Tip.Dataset : %>
        /// SqlDataAdapter.Fill varijanta
		<% foreach (CommandResultSchema table in SourceCommand.CommandResults) { %>
        /// Tablica <%= table.Name %> (<% foreach(CommandResultColumnSchema col in table.Columns) {%><%=col.Name %> <%= GetColDescription(col) %>, <%}%>)
		<% } %>
        /// </summary>
        /// <returns>Strong-typed klasa sa listom tablica i podacima.</returns>
        <%      break; %>
		<% case Tip.DataTable : %>
        /// SqlDataAdapter.Fill varijanta
        /// Tablica <%= SourceCommand.CommandResults[0].Name %> (<% foreach(CommandResultColumnSchema col in SourceCommand.CommandResults[0].Columns) {%><%=col.Name %> <%= GetColDescription(col) %>, <%}%>)
        /// </summary>
        /// <returns>Strong-typed lista koja predstavlja podatke koje je storica vratila.</returns>
        <%      break; %>
        <% case Tip.NonQuery : %>
        /// ExecuteNonQuery varijanta
        /// </summary>
        /// <returns>Broj redaka koji su obuhvaceni storicom</returns>
        <%      break; %>
        <% case Tip.Scalar : %>
        /// ExecuteScalar varijanta
        /// </summary>
        /// <returns>Prva kolona prvog retka iz rezultata</returns>
        <%      break; %>
        <% } %>
        <% foreach (ParameterSchema par in SourceCommand.AllInputParameters) { 
		string paramName = par.Name.Remove(0, 1);
		%>
        /// <param name="<%= paramName %>"><%= GetParamDescription(par) %></param>
		<% } %>
        public static <%= GetReturnValueType() %> Execute(<%= GetExecuteParametersString() %>) {
			DateTime startTime = DateTime.Now;
			
            string cnnStr = autogenerated_Common_dblibrary.GetConnectionString();
            System.Transactions.TransactionOptions opt = new System.Transactions.TransactionOptions();
            opt.IsolationLevel = GetIsolationLevel();
            System.Transactions.TransactionScope scope = new System.Transactions.TransactionScope(scopeOption, opt);
            using (scope) {
                using (SqlConnection cnn = new SqlConnection(cnnStr)) {
                    SqlCommand cmd = new SqlCommand("<%= SourceCommand.Name %>", cnn);
                    cmd.CommandType = CommandType.StoredProcedure;
					if (commandTimeout > -1) {
						cmd.CommandTimeout = commandTimeout;
					}
    
                    <% foreach (ParameterSchema par in SourceCommand.AllInputParameters) { 
                        string paramName = par.Name.Remove(0, 1);
                    %>
                    <%
                    if (par.Name.ToLower() == "@pageindex") {
                    %>if (pageIndex == null || pageIndex < 1) pageIndex = 1;<%
                    } else if (par.Name.ToLower() == "@pagesize") {
                    %>if (pageSize == null || pageSize < 1) pageSize = int.MaxValue;<%
                    }
                    %>
                    SqlParameter param<%= paramName %> = cmd.Parameters.Add("<%= par.Name %>", SqlDbType.<%= GetSqlDbType(par.NativeType) %>);
                    if (<%= paramName %> != null) param<%= paramName %>.Value = <%= paramName %>;
                    else param<%= paramName %>.Value = DBNull.Value;
                    <% } %>
                    
                    <% switch (TipStorice()) { %>
                    <% case Tip.Dataset : %>
                    Ret retVal = new Ret();
                    cnn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();
                    <% int i = 0; %>
                    <% foreach (CommandResultSchema table in SourceCommand.CommandResults) { %>
                    #region Table<%= table.Name %>
                    <% if (i > 0) { %>
                    if (reader.NextResult()) {
                    <% } %>
                        while(reader.Read()) {
                            object tmp;
                            Ret.Table<%= table.Name %>Entity rv = new Ret.Table<%= table.Name %>Entity();
                            <% foreach (CommandResultColumnSchema col in table.Columns) { %>
                            tmp = reader["<%= col.Name %>"];
                            if (tmp == DBNull.Value) tmp = null;
                            rv.<%= col.Name %> = (<%= GetColumnValueType(col) %>) tmp;
                            <% } %>
                            retVal.Table<%= table.Name %>.Add(rv);
                        }
                    <% if (i > 0) { %>
                    }
                    <% } %>
                    #endregion
                    <% i++; %>
                    <% } %>
                    reader.Close();
                    scope.Complete();
					
					DateTime endTime = DateTime.Now;
                    if (autogenerated_Common_dblibrary.EnableProfiling
                        && autogenerated_Common_dblibrary.StoredProcedureEnd != null) {
                        autogenerated_Common_dblibrary.StoredProcedureEnd("<%= SourceCommand.Name %>", endTime.Subtract(startTime).TotalMilliseconds);
                    }
					
                    return retVal;
                    <%      break; %>
                    <% case Tip.DataTable : %>
                    List<Ret> retVal = new List<Ret>();
                    cnn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();
                    while(reader.Read()) {
                        object tmp;
                        Ret rv = new Ret();
                        <% foreach (CommandResultColumnSchema col in SourceCommand.CommandResults[0].Columns) { %>
                        tmp = reader["<%= col.Name %>"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.<%= col.Name %> = (<%= GetColumnValueType(col) %>) tmp;
                        <% } %>
                        retVal.Add(rv);
                    }
                    reader.Close();
                    scope.Complete();
					
					DateTime endTime = DateTime.Now;
                    if (autogenerated_Common_dblibrary.EnableProfiling
                        && autogenerated_Common_dblibrary.StoredProcedureEnd != null) {
                        autogenerated_Common_dblibrary.StoredProcedureEnd("<%= SourceCommand.Name %>", endTime.Subtract(startTime).TotalMilliseconds);
                    }
					
                    return retVal;
                    <%      break; %>
                    <% case Tip.NonQuery : %>
                    cnn.Open();
                    int res = cmd.ExecuteNonQuery();
                    scope.Complete();
					
					DateTime endTime = DateTime.Now;
                    if (autogenerated_Common_dblibrary.EnableProfiling
                        && autogenerated_Common_dblibrary.StoredProcedureEnd != null) {
                        autogenerated_Common_dblibrary.StoredProcedureEnd("<%= SourceCommand.Name %>", endTime.Subtract(startTime).TotalMilliseconds);
                    }
					
                    return res;
                    <%      break; %>
                    <% case Tip.Scalar : %>
                    cnn.Open();
                    object o = cmd.ExecuteScalar();
                    scope.Complete();
					
					DateTime endTime = DateTime.Now;
                    if (autogenerated_Common_dblibrary.EnableProfiling
                        && autogenerated_Common_dblibrary.StoredProcedureEnd != null) {
                        autogenerated_Common_dblibrary.StoredProcedureEnd("<%= SourceCommand.Name %>", endTime.Subtract(startTime).TotalMilliseconds);
                    }
					
                    if (o != null) {
                        return (<%= GetReturnValueType() %>) o;
                    } else {
                        return null;
                    }
                    <%      break; %>
                    <% } %>
                }
            }
        }
		
		#region async
        /// <summary>
        /// Preko ove metode se pokrece <%= SourceCommand.Name %>, ali asinkrono.
		/// Metodi se predaje delegat (callback) koji ce se pozvati kada se storica izvrsi.
		/// Unutar callback metode, potrebno je pozvati EndExecute da bi se dobio rezultat storice (ukoliko je doslo do greske, pozivanje EndExecute dize taj exception).
		/// </summary>
        public static IAsyncResult BeginExecute(<% string parametri1 = GetExecuteParametersString(); if (parametri1.Length > 0) {%><%= parametri1 %>, <%}%>AsyncCallback callback, object state) {
            ExecuteDelegate delegat = Execute;
            AsyncState asyncState = new AsyncState();
            asyncState.delegat = delegat;
			asyncState.state = state;
            return delegat.BeginInvoke(<% string parametri2 = GetExecuteParametersForCall(); if (parametri2.Length > 0) {%><%= parametri2 %>, <%}%>callback, asyncState);
        }
		/// <summary>
        /// result.AsyncState je <see cref="AsyncState"/> klasa, pa je potrebno castati u taj tip da bi do?li do vrijednosti koju smo poslali u <see cref="BeginExecute"/> metodu.
        /// </summary>
        /// <param name="result"></param>
        /// <returns></returns>
        public static <%= GetReturnValueType() %> EndExecute(IAsyncResult result) {
            if (result != null) {
                // cekamo dok se ne zavrsi async operacija (ako je korisnik pozvao BeginExecute i EndExecute jedno iza drugog)
                result.AsyncWaitHandle.WaitOne();

                if (result.AsyncState != null && result.AsyncState is AsyncState) {
                    AsyncState state = (AsyncState)result.AsyncState;
                    // zovemo endinvoke i vracamo rezultat
                    return state.delegat.EndInvoke(result);
                } else {
                    // result nije dobiven iz BeginExecute metode nego od negdje drugdje i nema sve sto bi trebao imati
                    throw new ArgumentException("Parametar result nije dobiven iz BeginExecute metode!", "result");
                }
            } else {
				throw new ArgumentNullException("result", "Parametar result ne smije biti null.");
			}
        }
        internal delegate <%= GetReturnValueType() %> ExecuteDelegate(<%= GetExecuteParametersString() %>);
        public class AsyncState {
            internal ExecuteDelegate delegat;
            public object state;
        }
        #endregion
		#region transaction options
			    private static IsolationLevel isolation = IsolationLevel.Unspecified;
        /// <summary>
        /// Dohvacanje nivoa izolacije transakcija.
        /// Ako se zeli overrajdati globalno ponasanje, potrebno je u partial klasi u statickom konstruktoru podesiti <see cref="isolation"/>.
        /// </summary>
        /// <returns></returns>
        private static IsolationLevel GetIsolationLevel() {
            if (isolation == IsolationLevel.Unspecified) {
                return autogenerated_Common_dblibrary.GetIsolationLevel();
            } else {
                return isolation;
            }
        }
		
		/// <summary>
        /// Oznaka da li je potrebna transakcija?
        /// Ako transakcija nije potrebna, ovo postaviti na <see cref="TransactionScopeOption.Suppress"/> u statickom konstruktoru u partial definiciji.
		/// Za select storice (koje pocinju sa 'ps') je default <see cref="TransactionScopeOption.Suppress"/> a za sve ostale <see cref="TransactionScopeOption.Required"/>
        /// </summary>
		<% if (SourceCommand.Name.ToLower().StartsWith("ps")) { %>
        private static TransactionScopeOption scopeOption = TransactionScopeOption.Suppress;
		<% } else { %>
		private static TransactionScopeOption scopeOption = TransactionScopeOption.Required;
		<% } %>
		#endregion
		#region command timeout
		/// <summary>
        /// Dohvacanje timeouta storice (SqlCommand.CommandTimeout) - u sekundama.
		/// Defaultna vrijednost vraca -1, sto znaci da se uzima sto god je defaultno za SqlCommand.CommandTimeout.
		/// 0 je beskonacno.
        /// </summary>
		private static int commandTimeout = -1;
		#endregion
		#region return values
		<% if (TipStorice() == Tip.DataTable) { %>
		[Serializable]
		<% if (GenerateDataContract) { %>
		[DataContract]
		<% } %>
		public class Ret {
			<% foreach (CommandResultColumnSchema col in SourceCommand.CommandResults[0].Columns) { %>
			private <%= GetColumnValueType(col) %> _<%= col.Name %>;
			/// <summary>
			/// <%= GetColumnDescription(col) %>
			/// </summary>
			<% if (GenerateDataContract) { %>
			[DataMember]
			<% } %>
			public <%= GetColumnValueType(col) %> <%= col.Name %> {
				get {
					return _<%= col.Name %>;
				}
				set {
					_<%= col.Name %> = value;
				}
			}
			<% } %>
		}
		<% } else if (TipStorice() == Tip.Dataset) { %>
		[Serializable]
		<% if (GenerateDataContract) { %>
		[DataContract]
		<% } %>
		public class Ret {
            <% foreach (CommandResultSchema table in SourceCommand.CommandResults) { %>
            private List<Table<%= table.Name %>Entity> _Table<%= table.Name %> = new List<Table<%= table.Name %>Entity>();
			<% if (GenerateDataContract) { %>
			[DataMember]
			<% } %>
            public List<Table<%= table.Name %>Entity> Table<%= table.Name %> {
                get {
                    return _Table<%= table.Name %>;
                }
				set {
                    _Table<%= table.Name %> = value;
                }
            }
            <% } %>
            <% foreach (CommandResultSchema table in SourceCommand.CommandResults) { %>
            /// <summary>
            /// Kolone: <% foreach(CommandResultColumnSchema col in table.Columns) {%><%=col.Name %> <%= GetColDescription(col) %>, <%}%>
            /// </summary>
			<% if (GenerateDataContract) { %>
			[DataContract]
			<% } %>
            public class Table<%= table.Name %>Entity {
                <% foreach (CommandResultColumnSchema col in table.Columns) { %>
                private <%= GetColumnValueType(col) %> _<%= col.Name %>;
                /// <summary>
                /// <%= GetColumnDescription(col) %>
                /// </summary>
				<% if (GenerateDataContract) { %>
				[DataMember]
				<% } %>
                public <%= GetColumnValueType(col) %> <%= col.Name %> {
                    get {
                        return _<%= col.Name %>;
                    }
                    set {
                        _<%= col.Name %> = value;
                    }
                }
                <% } %>
            }
            <% } %>
        }
        <% } %>
		#endregion
    }
}
<script runat="template">
// tip storice
public enum Tip {
	// ExecuteNonQuery
	NonQuery,
	// ExecuteScalar
	Scalar,
	Dataset,
	DataTable
}
[Browsable(false)]
public string ClassName {
	get {
        if (SourceCommand == null) {
            return "";
        } else {
		    return SourceCommand.Name;
        }
	}
}
// vraca tip storice
public Tip TipStorice() {
	if (SourceCommand.CommandResults.Count < 1) {
		return Tip.NonQuery;
	} else if (SourceCommand.CommandResults.Count == 1) {
		if (SourceCommand.CommandResults[0].Columns.Count == 1) {
			return Tip.Scalar;
		} else {
			return Tip.DataTable;
		}
	} else {
		return Tip.Dataset;
	}
}
// dohvaca tip koji vraca Execute metoda
public string GetReturnValueType() {
	switch (TipStorice()) {
		case Tip.Dataset : return ClassName + ".Ret";
		case Tip.DataTable : return "List<" + ClassName + ".Ret>";
		case Tip.NonQuery : return "System.Int32";
		case Tip.Scalar : 
            if (SourceCommand.CommandResults[0].Columns[0].SystemType.IsValueType && SourceCommand.CommandResults[0].Columns[0].AllowDBNull) {
                return SourceCommand.CommandResults[0].Columns[0].SystemType.ToString() + "?";
            } else {
                return SourceCommand.CommandResults[0].Columns[0].SystemType.ToString();
            }
		default : return "System.Int32";
	}
}
public string GetColumnValueType(CommandResultColumnSchema col) {
            if (col.SystemType.IsValueType && col.AllowDBNull) {
                return col.SystemType.ToString() + "?";
            } else {
                return col.SystemType.ToString();
            }
}
// dohvacanje stringa parametara za Execute metodu
public string GetExecuteParametersString() {
    StringBuilder sb = new StringBuilder();
    foreach (ParameterSchema par in SourceCommand.AllInputParameters) {
        string paramName = par.Name.Remove(0, 1);
        //if (par.SystemType.HasElementType
        //if (par.SystemType.IsPrimitive
        if (par.NativeType == "xml") {
            sb.Append("System.String " + paramName + ", ");
        } else if (par.SystemType.IsValueType && par.AllowDBNull) {
            sb.Append(par.SystemType.ToString() + "? " + paramName + ", ");
        } else {
            sb.Append(par.SystemType.ToString() + " " + paramName + ", ");
        }
    }
    
    if (sb.Length > 0) {
        sb.Remove(sb.Length - 2, 2);
    }
    
    return sb.ToString();
}
public string GetExecuteParametersForCall() {
    StringBuilder sb = new StringBuilder();
    foreach (ParameterSchema par in SourceCommand.AllInputParameters) {
        string paramName = par.Name.Remove(0, 1);
        sb.Append(paramName + ", ");
    }
    
    if (sb.Length > 0) {
        sb.Remove(sb.Length - 2, 2);
    }
    
    return sb.ToString();
}
// vraca element enumeracije SqlDbType koji odgovara nativnom sql tipu
public string GetSqlDbType(string nativeType){
	switch (nativeType)	{
		case "bigint": return "BigInt";
		case "binary": return "Binary";
		case "bit": return "Bit";
		case "char": return "Char";
		case "datetime": return "DateTime";
		case "decimal": return "Decimal";
		case "float": return "Float";
		case "image": return "Image";
		case "int": return "Int";
		case "money": return "Money";
		case "nchar": return "NChar";
		case "ntext": return "NText";
		case "numeric": return "Decimal";
		case "nvarchar": return "NVarChar";
		case "real": return "Real";
		case "smalldatetime": return "SmallDateTime";
		case "smallint": return "SmallInt";
		case "smallmoney": return "SmallMoney";
		case "sql_variant": return "Variant";
		case "sysname": return "NChar";
		case "text": return "Text";
		case "timestamp": return "Timestamp";
		case "tinyint": return "TinyInt";
		case "uniqueidentifier": return "UniqueIdentifier";
		case "varbinary": return "VarBinary";
		case "varchar": return "VarChar";
        case "xml": return "VarChar";
		default : {
			return "banana->" + nativeType;
		}
	}
}
// dohvacanje opisa parametra - za xml komentar
public string GetParamDescription(ParameterSchema par) {
	string retVal = "";
    switch (par.NativeType) {
        case "decimal" :
        case "numeric" :
        case "money" :
        case "smallmoney" :
        case "float" :
        case "real" :
            retVal = par.NativeType + "(" + par.Precision + ", " + par.Scale + ") " + par.Description;
			break;
        case "text" :
        case "ntext" :
            return par.NativeType + " " + par.Description;
        case "char" :
        case "varchar" :
        case "nchar" :
        case "nvarchar" :
        case "binary" :
        case "image" :
        case "varbinary" :
            retVal = par.NativeType + "(" + par.Size + ") " + par.Description;
			break;
        case "xml" :
            retVal = "xml " + par.Description;
            break;
        default :
            retVal = par.NativeType + " " + par.Description;
			break;
    }
	if (par.Name.ToLower() == "@pageindex") {
		retVal += ", indeks stranice za paging (default je 1 - u slucaju null vrijednosti, ne smije biti negativno ili 0).";
	} else if (par.Name.ToLower() == "@pagesize") {
		retVal += ", velicina stranice za paging (default je 10 - u slucaju null vrijednosti, ne smije biti negativno ili 0).";
	}
	
	return retVal;
}
// dohvacanje opisa kolone - za xml komentar
public string GetColumnDescription(CommandResultColumnSchema col) {
    switch (col.NativeType) {
        case "decimal" :
        case "numeric" :
        case "money" :
        case "smallmoney" :
        case "float" :
        case "real" :
            return col.NativeType + "(" + col.Precision + ", " + col.Scale + ") " + col.Description;
        case "text" :
        case "ntext" :
            return col.NativeType + " " + col.Description;
        case "char" :
        case "varchar" :
        case "nchar" :
        case "nvarchar" :
        case "binary" :
        case "image" :
        case "varbinary" :
            return col.NativeType + "(" + col.Size + ") " + col.Description;
        case "xml" :
            return "xml " + col.Description;
        default :
            return col.NativeType + " " + col.Description;
    }
}
// dohvacanje opisa kolone - za xml komentar
public string GetColDescription(CommandResultColumnSchema col) {
    switch (col.NativeType) {
        case "decimal" :
        case "numeric" :
        case "money" :
        case "smallmoney" :
        case "float" :
        case "real" :
            return col.NativeType + "(" + col.Precision + ", " + col.Scale + ") " + col.Description;
        case "text" :
        case "ntext" :
            return col.NativeType + " " + col.Description;
        case "char" :
        case "varchar" :
        case "nchar" :
        case "nvarchar" :
        case "binary" :
        case "image" :
        case "varbinary" :
            return col.NativeType + "(" + col.Size + ") " + col.Description;
        case "xml" :
            return "xml " + col.Description;
        default :
            return col.NativeType + " " + col.Description;
    }
}
</script>