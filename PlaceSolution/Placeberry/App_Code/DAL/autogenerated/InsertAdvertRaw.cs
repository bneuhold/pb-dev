//------------------------------------------------------------------------------
// <autogenerated>
//     Date:                20110705
//     Time:                16:38 
//     CodeSmith Version:   5.0.0.0
//     Template created by:	Vedran Kaldi (vedran@vkaldi.com)
//
//     Ovaj fajl je autogeneriran i ne smije se mijenjati!
//     
//     Wrapper klasa za storicu InsertAdvertRaw
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections.Generic;
using System.Runtime.Serialization;
using IsolationLevel = System.Transactions.IsolationLevel;
using System.Transactions;

namespace Placeberry.DAL
{
    /// <summary>
    /// Wrapper oko procedure InsertAdvertRaw.
    /// Za izvrsavanje koristiti Execute metodu.
    /// </summary>
    public static partial class InsertAdvertRaw
    {
        /// <summary>
        /// Preko ove metode se izvrsava storica InsertAdvertRaw.
        /// ExecuteScalar varijanta
        /// </summary>
        /// <returns>Prva kolona prvog retka iz rezultata</returns>
        /// <param name="AgencyId">int </param>
        /// <param name="GenerationId">int </param>
        /// <param name="LanguageId">int </param>
        /// <param name="HashCode">varchar(-1) </param>
        /// <param name="SystemStatus">char(1) </param>
        /// <param name="Active">bit </param>
        /// <param name="Source">nvarchar(250) </param>
        /// <param name="Language">nvarchar(50) </param>
        /// <param name="GroupType">nvarchar(250) </param>
        /// <param name="GroupSubType">nvarchar(250) </param>
        /// <param name="SourceCategory">nvarchar(1200) </param>
        /// <param name="Title">nvarchar(250) </param>
        /// <param name="AccommType">nvarchar(250) </param>
        /// <param name="AccommSubType">nvarchar(250) </param>
        /// <param name="VacationType">nvarchar(250) </param>
        /// <param name="AdvertCode">nvarchar(50) </param>
        /// <param name="UrlLink">nvarchar(1200) </param>
        /// <param name="PictureUrl">nvarchar(1200) </param>
        /// <param name="Stars">nvarchar(50) </param>
        /// <param name="LocationDesc">nvarchar(-1) </param>
        /// <param name="Country">nvarchar(250) </param>
        /// <param name="Region">nvarchar(250) </param>
        /// <param name="Subregion">nvarchar(250) </param>
        /// <param name="Island">nvarchar(250) </param>
        /// <param name="City">nvarchar(250) </param>
        /// <param name="PriceOld">nvarchar(250) </param>
        /// <param name="PriceFrom">nvarchar(250) </param>
        /// <param name="PriceDesc">nvarchar(250) </param>
        /// <param name="Date1">nvarchar(250) </param>
        /// <param name="Date2">nvarchar(250) </param>
        /// <param name="DateDesc">nvarchar(500) </param>
        /// <param name="DaysNum">nvarchar(50) </param>
        /// <param name="Description">nvarchar(-1) </param>
        /// <param name="Activities">nvarchar(-1) </param>
        /// <param name="Facilities">nvarchar(-1) </param>
        /// <param name="Beach">nvarchar(250) </param>
        /// <param name="BeachDistanceM">nvarchar(250) </param>
        /// <param name="DistanceFromCentreM">nvarchar(250) </param>
        /// <param name="PetsDesc">nvarchar(250) </param>
        /// <param name="InfoDesc">nvarchar(250) </param>
        public static System.Decimal? Execute(System.Int32? AgencyId, System.Int32? GenerationId, System.Int32? LanguageId, System.String HashCode, System.String SystemStatus, System.Boolean? Active, System.String Source, System.String Language, System.String GroupType, System.String GroupSubType, System.String SourceCategory, System.String Title, System.String AccommType, System.String AccommSubType, System.String VacationType, System.String AdvertCode, System.String UrlLink, System.String PictureUrl, System.String Stars, System.String LocationDesc, System.String Country, System.String Region, System.String Subregion, System.String Island, System.String City, System.String PriceOld, System.String PriceFrom, System.String PriceDesc, System.String Date1, System.String Date2, System.String DateDesc, System.String DaysNum, System.String Description, System.String Activities, System.String Facilities, System.String Beach, System.String BeachDistanceM, System.String DistanceFromCentreM, System.String PetsDesc, System.String InfoDesc)
        {
            DateTime startTime = DateTime.Now;

            string cnnStr = autogenerated_Common_dblibrary.GetConnectionString();
            System.Transactions.TransactionOptions opt = new System.Transactions.TransactionOptions();
            opt.IsolationLevel = GetIsolationLevel();
            System.Transactions.TransactionScope scope = new System.Transactions.TransactionScope(scopeOption, opt);
            using (scope)
            {
                using (SqlConnection cnn = new SqlConnection(cnnStr))
                {
                    SqlCommand cmd = new SqlCommand("InsertAdvertRaw", cnn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    if (commandTimeout > -1)
                    {
                        cmd.CommandTimeout = commandTimeout;
                    }

                    SqlParameter paramAgencyId = cmd.Parameters.Add("@AgencyId", SqlDbType.Int);
                    if (AgencyId != null) paramAgencyId.Value = AgencyId;
                    else paramAgencyId.Value = DBNull.Value;


                    SqlParameter paramGenerationId = cmd.Parameters.Add("@GenerationId", SqlDbType.Int);
                    if (GenerationId != null) paramGenerationId.Value = GenerationId;
                    else paramGenerationId.Value = DBNull.Value;

                    SqlParameter paramLanguageId = cmd.Parameters.Add("@LanguageId", SqlDbType.Int);
                    if (LanguageId != null) paramLanguageId.Value = LanguageId;
                    else paramLanguageId.Value = DBNull.Value;

                    SqlParameter paramHashCode = cmd.Parameters.Add("@HashCode", SqlDbType.VarChar);
                    if (HashCode != null) paramHashCode.Value = HashCode;
                    else paramHashCode.Value = DBNull.Value;

                    SqlParameter paramSystemStatus = cmd.Parameters.Add("@SystemStatus", SqlDbType.Char);
                    if (SystemStatus != null) paramSystemStatus.Value = SystemStatus;
                    else paramSystemStatus.Value = DBNull.Value;

                    SqlParameter paramActive = cmd.Parameters.Add("@Active", SqlDbType.Bit);
                    if (Active != null) paramActive.Value = Active;
                    else paramActive.Value = DBNull.Value;

                    SqlParameter paramSource = cmd.Parameters.Add("@Source", SqlDbType.NVarChar);
                    if (Source != null) paramSource.Value = Source;
                    else paramSource.Value = DBNull.Value;

                    SqlParameter paramLanguage = cmd.Parameters.Add("@Language", SqlDbType.NVarChar);
                    if (Language != null) paramLanguage.Value = Language;
                    else paramLanguage.Value = DBNull.Value;

                    SqlParameter paramGroupType = cmd.Parameters.Add("@GroupType", SqlDbType.NVarChar);
                    if (GroupType != null) paramGroupType.Value = GroupType;
                    else paramGroupType.Value = DBNull.Value;

                    SqlParameter paramGroupSubType = cmd.Parameters.Add("@GroupSubType", SqlDbType.NVarChar);
                    if (GroupSubType != null) paramGroupSubType.Value = GroupSubType;
                    else paramGroupSubType.Value = DBNull.Value;

                    SqlParameter paramSourceCategory = cmd.Parameters.Add("@SourceCategory", SqlDbType.NVarChar);
                    if (SourceCategory != null) paramSourceCategory.Value = SourceCategory;
                    else paramSourceCategory.Value = DBNull.Value;

                    SqlParameter paramTitle = cmd.Parameters.Add("@Title", SqlDbType.NVarChar);
                    if (Title != null) paramTitle.Value = Title;
                    else paramTitle.Value = DBNull.Value;

                    SqlParameter paramAccommType = cmd.Parameters.Add("@AccommType", SqlDbType.NVarChar);
                    if (AccommType != null) paramAccommType.Value = AccommType;
                    else paramAccommType.Value = DBNull.Value;

                    SqlParameter paramAccommSubType = cmd.Parameters.Add("@AccommSubType", SqlDbType.NVarChar);
                    if (AccommSubType != null) paramAccommSubType.Value = AccommSubType;
                    else paramAccommSubType.Value = DBNull.Value;

                    SqlParameter paramVacationType = cmd.Parameters.Add("@VacationType", SqlDbType.NVarChar);
                    if (VacationType != null) paramVacationType.Value = VacationType;
                    else paramVacationType.Value = DBNull.Value;

                    SqlParameter paramAdvertCode = cmd.Parameters.Add("@AdvertCode", SqlDbType.NVarChar);
                    if (AdvertCode != null) paramAdvertCode.Value = AdvertCode;
                    else paramAdvertCode.Value = DBNull.Value;

                    SqlParameter paramUrlLink = cmd.Parameters.Add("@UrlLink", SqlDbType.NVarChar);
                    if (UrlLink != null) paramUrlLink.Value = UrlLink;
                    else paramUrlLink.Value = DBNull.Value;

                    SqlParameter paramPictureUrl = cmd.Parameters.Add("@PictureUrl", SqlDbType.NVarChar);
                    if (PictureUrl != null) paramPictureUrl.Value = PictureUrl;
                    else paramPictureUrl.Value = DBNull.Value;

                    SqlParameter paramStars = cmd.Parameters.Add("@Stars", SqlDbType.NVarChar);
                    if (Stars != null) paramStars.Value = Stars;
                    else paramStars.Value = DBNull.Value;

                    SqlParameter paramLocationDesc = cmd.Parameters.Add("@LocationDesc", SqlDbType.NVarChar);
                    if (LocationDesc != null) paramLocationDesc.Value = LocationDesc;
                    else paramLocationDesc.Value = DBNull.Value;

                    SqlParameter paramCountry = cmd.Parameters.Add("@Country", SqlDbType.NVarChar);
                    if (Country != null) paramCountry.Value = Country;
                    else paramCountry.Value = DBNull.Value;

                    SqlParameter paramRegion = cmd.Parameters.Add("@Region", SqlDbType.NVarChar);
                    if (Region != null) paramRegion.Value = Region;
                    else paramRegion.Value = DBNull.Value;

                    SqlParameter paramSubregion = cmd.Parameters.Add("@Subregion", SqlDbType.NVarChar);
                    if (Subregion != null) paramSubregion.Value = Subregion;
                    else paramSubregion.Value = DBNull.Value;

                    SqlParameter paramIsland = cmd.Parameters.Add("@Island", SqlDbType.NVarChar);
                    if (Island != null) paramIsland.Value = Island;
                    else paramIsland.Value = DBNull.Value;

                    SqlParameter paramCity = cmd.Parameters.Add("@City", SqlDbType.NVarChar);
                    if (City != null) paramCity.Value = City;
                    else paramCity.Value = DBNull.Value;

                    SqlParameter paramPriceOld = cmd.Parameters.Add("@PriceOld", SqlDbType.NVarChar);
                    if (PriceOld != null) paramPriceOld.Value = PriceOld;
                    else paramPriceOld.Value = DBNull.Value;

                    SqlParameter paramPriceFrom = cmd.Parameters.Add("@PriceFrom", SqlDbType.NVarChar);
                    if (PriceFrom != null) paramPriceFrom.Value = PriceFrom;
                    else paramPriceFrom.Value = DBNull.Value;

                    SqlParameter paramPriceDesc = cmd.Parameters.Add("@PriceDesc", SqlDbType.NVarChar);
                    if (PriceDesc != null) paramPriceDesc.Value = PriceDesc;
                    else paramPriceDesc.Value = DBNull.Value;

                    SqlParameter paramDate1 = cmd.Parameters.Add("@Date1", SqlDbType.NVarChar);
                    if (Date1 != null) paramDate1.Value = Date1;
                    else paramDate1.Value = DBNull.Value;

                    SqlParameter paramDate2 = cmd.Parameters.Add("@Date2", SqlDbType.NVarChar);
                    if (Date2 != null) paramDate2.Value = Date2;
                    else paramDate2.Value = DBNull.Value;

                    SqlParameter paramDateDesc = cmd.Parameters.Add("@DateDesc", SqlDbType.NVarChar);
                    if (DateDesc != null) paramDateDesc.Value = DateDesc;
                    else paramDateDesc.Value = DBNull.Value;

                    SqlParameter paramDaysNum = cmd.Parameters.Add("@DaysNum", SqlDbType.NVarChar);
                    if (DaysNum != null) paramDaysNum.Value = DaysNum;
                    else paramDaysNum.Value = DBNull.Value;

                    SqlParameter paramDescription = cmd.Parameters.Add("@Description", SqlDbType.NVarChar);
                    if (Description != null) paramDescription.Value = Description;
                    else paramDescription.Value = DBNull.Value;

                    SqlParameter paramActivities = cmd.Parameters.Add("@Activities", SqlDbType.NVarChar);
                    if (Activities != null) paramActivities.Value = Activities;
                    else paramActivities.Value = DBNull.Value;

                    SqlParameter paramFacilities = cmd.Parameters.Add("@Facilities", SqlDbType.NVarChar);
                    if (Facilities != null) paramFacilities.Value = Facilities;
                    else paramFacilities.Value = DBNull.Value;

                    SqlParameter paramBeach = cmd.Parameters.Add("@Beach", SqlDbType.NVarChar);
                    if (Beach != null) paramBeach.Value = Beach;
                    else paramBeach.Value = DBNull.Value;

                    SqlParameter paramBeachDistanceM = cmd.Parameters.Add("@BeachDistanceM", SqlDbType.NVarChar);
                    if (BeachDistanceM != null) paramBeachDistanceM.Value = BeachDistanceM;
                    else paramBeachDistanceM.Value = DBNull.Value;

                    SqlParameter paramDistanceFromCentreM = cmd.Parameters.Add("@DistanceFromCentreM", SqlDbType.NVarChar);
                    if (DistanceFromCentreM != null) paramDistanceFromCentreM.Value = DistanceFromCentreM;
                    else paramDistanceFromCentreM.Value = DBNull.Value;

                    SqlParameter paramPetsDesc = cmd.Parameters.Add("@PetsDesc", SqlDbType.NVarChar);
                    if (PetsDesc != null) paramPetsDesc.Value = PetsDesc;
                    else paramPetsDesc.Value = DBNull.Value;

                    SqlParameter paramInfoDesc = cmd.Parameters.Add("@InfoDesc", SqlDbType.NVarChar);
                    if (InfoDesc != null) paramInfoDesc.Value = InfoDesc;
                    else paramInfoDesc.Value = DBNull.Value;

                    cnn.Open();
                    object o = cmd.ExecuteScalar();
                    scope.Complete();

                    DateTime endTime = DateTime.Now;
                    if (autogenerated_Common_dblibrary.EnableProfiling
                        && autogenerated_Common_dblibrary.StoredProcedureEnd != null)
                    {
                        autogenerated_Common_dblibrary.StoredProcedureEnd("InsertAdvertRaw", endTime.Subtract(startTime).TotalMilliseconds);
                    }

                    if (o != null)
                    {
                        return (System.Decimal?)o;
                    }
                    else
                    {
                        return null;
                    }
                }
            }
        }

        #region async
        /// <summary>
        /// Preko ove metode se pokrece InsertAdvertRaw, ali asinkrono.
        /// Metodi se predaje delegat (callback) koji ce se pozvati kada se storica izvrsi.
        /// Unutar callback metode, potrebno je pozvati EndExecute da bi se dobio rezultat storice (ukoliko je doslo do greske, pozivanje EndExecute dize taj exception).
        /// </summary>
        public static IAsyncResult BeginExecute(System.Int32? AgencyId, System.Int32? GenerationId, System.Int32? LanguageId, System.String HashCode, System.String SystemStatus, System.Boolean? Active, System.String Source, System.String Language, System.String GroupType, System.String GroupSubType, System.String SourceCategory, System.String Title, System.String AccommType, System.String AccommSubType, System.String VacationType, System.String AdvertCode, System.String UrlLink, System.String PictureUrl, System.String Stars, System.String LocationDesc, System.String Country, System.String Region, System.String Subregion, System.String Island, System.String City, System.String PriceOld, System.String PriceFrom, System.String PriceDesc, System.String Date1, System.String Date2, System.String DateDesc, System.String DaysNum, System.String Description, System.String Activities, System.String Facilities, System.String Beach, System.String BeachDistanceM, System.String DistanceFromCentreM, System.String PetsDesc, System.String InfoDesc, AsyncCallback callback, object state)
        {
            ExecuteDelegate delegat = Execute;
            AsyncState asyncState = new AsyncState();
            asyncState.delegat = delegat;
            asyncState.state = state;
            return delegat.BeginInvoke(AgencyId, GenerationId, LanguageId, HashCode, SystemStatus, Active, Source, Language, GroupType, GroupSubType, SourceCategory, Title, AccommType, AccommSubType, VacationType, AdvertCode, UrlLink, PictureUrl, Stars, LocationDesc, Country, Region, Subregion, Island, City, PriceOld, PriceFrom, PriceDesc, Date1, Date2, DateDesc, DaysNum, Description, Activities, Facilities, Beach, BeachDistanceM, DistanceFromCentreM, PetsDesc, InfoDesc, callback, asyncState);
        }
        /// <summary>
        /// result.AsyncState je <see cref="AsyncState"/> klasa, pa je potrebno castati u taj tip da bi do?li do vrijednosti koju smo poslali u <see cref="BeginExecute"/> metodu.
        /// </summary>
        /// <param name="result"></param>
        /// <returns></returns>
        public static System.Decimal? EndExecute(IAsyncResult result)
        {
            if (result != null)
            {
                // cekamo dok se ne zavrsi async operacija (ako je korisnik pozvao BeginExecute i EndExecute jedno iza drugog)
                result.AsyncWaitHandle.WaitOne();

                if (result.AsyncState != null && result.AsyncState is AsyncState)
                {
                    AsyncState state = (AsyncState)result.AsyncState;
                    // zovemo endinvoke i vracamo rezultat
                    return state.delegat.EndInvoke(result);
                }
                else
                {
                    // result nije dobiven iz BeginExecute metode nego od negdje drugdje i nema sve sto bi trebao imati
                    throw new ArgumentException("Parametar result nije dobiven iz BeginExecute metode!", "result");
                }
            }
            else
            {
                throw new ArgumentNullException("result", "Parametar result ne smije biti null.");
            }
        }
        internal delegate System.Decimal? ExecuteDelegate(System.Int32? AgencyId, System.Int32? GenerationId, System.Int32? LanguageId, System.String HashCode, System.String SystemStatus, System.Boolean? Active, System.String Source, System.String Language, System.String GroupType, System.String GroupSubType, System.String SourceCategory, System.String Title, System.String AccommType, System.String AccommSubType, System.String VacationType, System.String AdvertCode, System.String UrlLink, System.String PictureUrl, System.String Stars, System.String LocationDesc, System.String Country, System.String Region, System.String Subregion, System.String Island, System.String City, System.String PriceOld, System.String PriceFrom, System.String PriceDesc, System.String Date1, System.String Date2, System.String DateDesc, System.String DaysNum, System.String Description, System.String Activities, System.String Facilities, System.String Beach, System.String BeachDistanceM, System.String DistanceFromCentreM, System.String PetsDesc, System.String InfoDesc);
        public class AsyncState
        {
            internal ExecuteDelegate delegat;
            public object state;
        }
        #endregion
        #region transaction options
        private static IsolationLevel isolation = IsolationLevel.Unspecified;
        /// <summary>
        /// Dohvacanje nivoa izolacije transakcija.
        /// Ako se zeli overrajdati globalno ponasanje, potrebno je u partial klasi u statickom konstruktoru podesiti <see cref="isolation"/>.
        /// </summary>
        /// <returns></returns>
        private static IsolationLevel GetIsolationLevel()
        {
            if (isolation == IsolationLevel.Unspecified)
            {
                return autogenerated_Common_dblibrary.GetIsolationLevel();
            }
            else
            {
                return isolation;
            }
        }

        /// <summary>
        /// Oznaka da li je potrebna transakcija?
        /// Ako transakcija nije potrebna, ovo postaviti na <see cref="TransactionScopeOption.Suppress"/> u statickom konstruktoru u partial definiciji.
        /// Za select storice (koje pocinju sa 'ps') je default <see cref="TransactionScopeOption.Suppress"/> a za sve ostale <see cref="TransactionScopeOption.Required"/>
        /// </summary>
        private static TransactionScopeOption scopeOption = TransactionScopeOption.Required;
        #endregion
        #region command timeout
        /// <summary>
        /// Dohvacanje timeouta storice (SqlCommand.CommandTimeout) - u sekundama.
        /// Defaultna vrijednost vraca -1, sto znaci da se uzima sto god je defaultno za SqlCommand.CommandTimeout.
        /// 0 je beskonacno.
        /// </summary>
        private static int commandTimeout = -1;
        #endregion
        #region return values
        #endregion
    }
}
