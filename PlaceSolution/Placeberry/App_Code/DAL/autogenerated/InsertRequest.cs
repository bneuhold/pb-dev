//------------------------------------------------------------------------------
// <autogenerated>
//     Date:                20110707
//     Time:                16:34 
//     CodeSmith Version:   5.0.0.0
//     Template created by:	Vedran Kaldi (vedran@vkaldi.com)
//
//     Ovaj fajl je autogeneriran i ne smije se mijenjati!
//     
//     Wrapper klasa za storicu InsertRequest
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections.Generic;
using System.Runtime.Serialization;
using IsolationLevel = System.Transactions.IsolationLevel;
using System.Transactions;

namespace Placeberry.DAL
{
    /// <summary>
    /// Wrapper oko procedure InsertRequest.
    /// Za izvrsavanje koristiti Execute metodu.
    /// </summary>
    public static partial class InsertRequest
    {
        /// <summary>
        /// Preko ove metode se izvrsava storica InsertRequest.
        /// ExecuteScalar varijanta
        /// </summary>
        /// <returns>Prva kolona prvog retka iz rezultata</returns>
        /// <param name="URL">nvarchar(255) </param>
        /// <param name="Osoba">nvarchar(50) </param>
        /// <param name="Email">nvarchar(50) </param>
        /// <param name="Telefon">nvarchar(50) </param>
        /// <param name="VrijemeUnosa">datetime </param>
        public static System.Decimal? Execute(System.String URL, System.String Osoba, System.String Email, System.String Telefon, System.DateTime? VrijemeUnosa)
        {
            DateTime startTime = DateTime.Now;

            string cnnStr = autogenerated_Common_dblibrary.GetConnectionString();
            System.Transactions.TransactionOptions opt = new System.Transactions.TransactionOptions();
            opt.IsolationLevel = GetIsolationLevel();
            System.Transactions.TransactionScope scope = new System.Transactions.TransactionScope(scopeOption, opt);
            using (scope)
            {
                using (SqlConnection cnn = new SqlConnection(cnnStr))
                {
                    SqlCommand cmd = new SqlCommand("InsertRequest", cnn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    if (commandTimeout > -1)
                    {
                        cmd.CommandTimeout = commandTimeout;
                    }


                    SqlParameter paramURL = cmd.Parameters.Add("@URL", SqlDbType.NVarChar);
                    if (URL != null) paramURL.Value = URL;
                    else paramURL.Value = DBNull.Value;

                    SqlParameter paramOsoba = cmd.Parameters.Add("@Osoba", SqlDbType.NVarChar);
                    if (Osoba != null) paramOsoba.Value = Osoba;
                    else paramOsoba.Value = DBNull.Value;

                    SqlParameter paramEmail = cmd.Parameters.Add("@Email", SqlDbType.NVarChar);
                    if (Email != null) paramEmail.Value = Email;
                    else paramEmail.Value = DBNull.Value;

                    SqlParameter paramTelefon = cmd.Parameters.Add("@Telefon", SqlDbType.NVarChar);
                    if (Telefon != null) paramTelefon.Value = Telefon;
                    else paramTelefon.Value = DBNull.Value;

                    SqlParameter paramVrijemeUnosa = cmd.Parameters.Add("@VrijemeUnosa", SqlDbType.DateTime);
                    if (VrijemeUnosa != null) paramVrijemeUnosa.Value = VrijemeUnosa;
                    else paramVrijemeUnosa.Value = DBNull.Value;

                    cnn.Open();
                    object o = cmd.ExecuteScalar();
                    scope.Complete();

                    DateTime endTime = DateTime.Now;
                    if (autogenerated_Common_dblibrary.EnableProfiling
                        && autogenerated_Common_dblibrary.StoredProcedureEnd != null)
                    {
                        autogenerated_Common_dblibrary.StoredProcedureEnd("InsertRequest", endTime.Subtract(startTime).TotalMilliseconds);
                    }

                    if (o != null)
                    {
                        return (System.Decimal?)o;
                    }
                    else
                    {
                        return null;
                    }
                }
            }
        }

        #region async
        /// <summary>
        /// Preko ove metode se pokrece InsertRequest, ali asinkrono.
        /// Metodi se predaje delegat (callback) koji ce se pozvati kada se storica izvrsi.
        /// Unutar callback metode, potrebno je pozvati EndExecute da bi se dobio rezultat storice (ukoliko je doslo do greske, pozivanje EndExecute dize taj exception).
        /// </summary>
        public static IAsyncResult BeginExecute(System.String URL, System.String Osoba, System.String Email, System.String Telefon, System.DateTime? VrijemeUnosa, AsyncCallback callback, object state)
        {
            ExecuteDelegate delegat = Execute;
            AsyncState asyncState = new AsyncState();
            asyncState.delegat = delegat;
            asyncState.state = state;
            return delegat.BeginInvoke(URL, Osoba, Email, Telefon, VrijemeUnosa, callback, asyncState);
        }
        /// <summary>
        /// result.AsyncState je <see cref="AsyncState"/> klasa, pa je potrebno castati u taj tip da bi do?li do vrijednosti koju smo poslali u <see cref="BeginExecute"/> metodu.
        /// </summary>
        /// <param name="result"></param>
        /// <returns></returns>
        public static System.Decimal? EndExecute(IAsyncResult result)
        {
            if (result != null)
            {
                // cekamo dok se ne zavrsi async operacija (ako je korisnik pozvao BeginExecute i EndExecute jedno iza drugog)
                result.AsyncWaitHandle.WaitOne();

                if (result.AsyncState != null && result.AsyncState is AsyncState)
                {
                    AsyncState state = (AsyncState)result.AsyncState;
                    // zovemo endinvoke i vracamo rezultat
                    return state.delegat.EndInvoke(result);
                }
                else
                {
                    // result nije dobiven iz BeginExecute metode nego od negdje drugdje i nema sve sto bi trebao imati
                    throw new ArgumentException("Parametar result nije dobiven iz BeginExecute metode!", "result");
                }
            }
            else
            {
                throw new ArgumentNullException("result", "Parametar result ne smije biti null.");
            }
        }
        internal delegate System.Decimal? ExecuteDelegate(System.String URL, System.String Osoba, System.String Email, System.String Telefon, System.DateTime? VrijemeUnosa);
        public class AsyncState
        {
            internal ExecuteDelegate delegat;
            public object state;
        }
        #endregion
        #region transaction options
        private static IsolationLevel isolation = IsolationLevel.Unspecified;
        /// <summary>
        /// Dohvacanje nivoa izolacije transakcija.
        /// Ako se zeli overrajdati globalno ponasanje, potrebno je u partial klasi u statickom konstruktoru podesiti <see cref="isolation"/>.
        /// </summary>
        /// <returns></returns>
        private static IsolationLevel GetIsolationLevel()
        {
            if (isolation == IsolationLevel.Unspecified)
            {
                return autogenerated_Common_dblibrary.GetIsolationLevel();
            }
            else
            {
                return isolation;
            }
        }

        /// <summary>
        /// Oznaka da li je potrebna transakcija?
        /// Ako transakcija nije potrebna, ovo postaviti na <see cref="TransactionScopeOption.Suppress"/> u statickom konstruktoru u partial definiciji.
        /// Za select storice (koje pocinju sa 'ps') je default <see cref="TransactionScopeOption.Suppress"/> a za sve ostale <see cref="TransactionScopeOption.Required"/>
        /// </summary>
        private static TransactionScopeOption scopeOption = TransactionScopeOption.Required;
        #endregion
        #region command timeout
        /// <summary>
        /// Dohvacanje timeouta storice (SqlCommand.CommandTimeout) - u sekundama.
        /// Defaultna vrijednost vraca -1, sto znaci da se uzima sto god je defaultno za SqlCommand.CommandTimeout.
        /// 0 je beskonacno.
        /// </summary>
        private static int commandTimeout = -1;
        #endregion
        #region return values
        #endregion
    }
}
