//------------------------------------------------------------------------------
// <autogenerated>
//     Date:                20110620
//     Time:                00:22 
//     CodeSmith Version:   5.0.0.0
//     Template created by:	Vedran Kaldi (vedran@vkaldi.com)
//
//     Ovaj fajl je autogeneriran i ne smije se mijenjati!
//     
//     Wrapper klasa za storicu GetResults
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections.Generic;
using System.Runtime.Serialization;
using IsolationLevel = System.Transactions.IsolationLevel;
using System.Transactions;
using QueryRanking;

namespace Placeberry.DAL
{
    /// <summary>
    /// Wrapper oko procedure GetResults.
    /// Za izvrsavanje koristiti Execute metodu.
    /// </summary>
    public static partial class GetResults
    {
        /// <summary>
        /// Preko ove metode se izvrsava storica GetResults.
        /// SqlDataAdapter.Fill varijanta
        /// Tablica 1 (Id int , Title nvarchar(250) , Description nvarchar(2147483647) , PictureUrl nvarchar(1200) , Price decimal(15, 2) , PriceOld decimal(15, 2) , City nvarchar(150) , LocationDesc nvarchar(500) , CurrencyId int , AdvertRawId int , MatchCount int , Priority int , fwcnt int , SourceTitle nvarchar(250) , SourceUrl varchar(50) , CurrencySymbol nvarchar(5) , Row bigint , )
        /// </summary>
        /// <returns>Strong-typed lista koja predstavlja podatke koje je storica vratila.</returns>
        /// <param name="query">nvarchar(-1) </param>
        /// <param name="languageId">int </param>
        /// <param name="top">int </param>
        /// <param name="startRowIndex">int </param>
        /// <param name="maximumRows">int </param>
        /// <param name="orderBy">int </param>
        public static List<GetResults.Ret> Execute(System.String query, System.Int32? languageId, System.Int32? top, System.Int32? startRowIndex, System.Int32? maximumRows, System.Int32? orderBy, out System.String queryMessage)
        {
            CachedRanker ranker = CachedRanker.Instance;

            DateTime startTime = DateTime.Now;

            string cnnStr = autogenerated_Common_dblibrary.GetConnectionString();
            System.Transactions.TransactionOptions opt = new System.Transactions.TransactionOptions();
            opt.IsolationLevel = GetIsolationLevel();
            System.Transactions.TransactionScope scope = new System.Transactions.TransactionScope(scopeOption, opt);
            using (scope)
            {
                using (SqlConnection cnn = new SqlConnection(cnnStr))
                {
                    List<Int32> scores = ranker.Search(query, (int)languageId, (int)startRowIndex, (int)maximumRows);

                    if (scores.Count == 0)
                    {
                        queryMessage = "";
                        return new List<Ret>();
                    }

                    String[] res = new String[scores.Count];
                    for (int i = 0; i < scores.Count; ++i)
                    {
                        res[i] = scores[i].ToString();
                    }

                    String cmdStr= String.Format(
                        "SELECT ad.*, so.Title SourceTitle, So.Url SourceUrl, cu.Symbol CurrencySymbol, ag.UrlTag AgencyUrlTag , ac.UrlTag AccommodationUrlTag " +
                        "FROM Advert ad " +
                        "LEFT JOIN Currency cu ON cu.Id = ad.CurrencyId " +
                        "LEFT JOIN AgencyUrlTag ag ON ag.AgencyId = ad.AccommodationId " +
                        "LEFT JOIN AccommodationUrlTag ac ON ac.AccommodationId = ad.AccommodationId " +
                        "LEFT JOIN Source so ON so.Id = ad.SourceId " +                    
                        "WHERE ad.Id in ({0})", 
                        String.Join(", ", res));

                    SqlCommand cmd = new SqlCommand(cmdStr, cnn);

                    if (commandTimeout > -1)
                    {
                        cmd.CommandTimeout = commandTimeout;
                    }

                    List<Ret> retVal = new List<Ret>();

                    //if (startRowIndex != 0 || maximumRows != 9)
                    //{
                    //    queryMessage = "";
                    //    return retVal;
                    //}

                    cnn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();

                    Dictionary<int, Ret> retValMap = new Dictionary<int, Ret>();

                    while (reader.Read())
                    {
                        object tmp;
                        Ret rv = new Ret();
                        tmp = reader["Id"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.Id = (System.Int32)tmp;
                        tmp = reader["Title"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.Title = (System.String)tmp;
                        tmp = reader["AccommodationType"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.AccommType = (System.String)tmp;
                        tmp = reader["AdvertInfoId"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.AdvertInfoId = (System.Int32?)tmp;
                        tmp = reader["CapacityMin"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.CapacityMin = (System.Int32?)tmp;
                        tmp = reader["CapacityMax"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.CapacityMax = (System.Int32?)tmp;

                        tmp = reader["PlaceberryAdvert"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.PlaceberryAdvert = (System.Boolean)tmp;
                        tmp = reader["AgencyId"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.AgencyId = (System.Int32?)tmp;
                        tmp = reader["AgencyName"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.AgencyName = (System.String)tmp;
                        tmp = reader["AccommodationId"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.AccommodationId = (System.Int32?)tmp;
                        
                        tmp = reader["Description"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.Description = (System.String)tmp;
                        tmp = reader["LanguageId"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.LanguageId = (System.Int32)tmp;


                        tmp = reader["PictureUrl"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.PictureUrl = (System.String)tmp;
                        tmp = reader["Price"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.Price = (System.Decimal?)tmp;
                        tmp = reader["PriceOld"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.PriceOld =  (System.Decimal?)tmp;
                        




                        tmp = reader["Country"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.Country = (System.String)tmp;
                        tmp = reader["Region"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.Region = (System.String)tmp;
                        tmp = reader["Island"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.Island = (System.String)tmp;
                        tmp = reader["City"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.City = (System.String)tmp;
                        
                        
                        
                        tmp = reader["CurrencyId"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.CurrencyId = (System.Int32?)tmp;
                        tmp = reader["AdvertRawId"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.AdvertRawId = (System.Int32?)tmp;


                        tmp = reader["SourceTitle"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.SourceTitle = (System.String)tmp;
                        tmp = reader["SourceUrl"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.SourceUrl = (System.String)tmp;
                        tmp = reader["CurrencySymbol"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.CurrencySymbol = (System.String)tmp;

                        tmp = reader["AgencyUrlTag"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.AgencyUrlTag = (System.String)tmp;
                        tmp = reader["AccommodationUrlTag"];
                        if (tmp == DBNull.Value) tmp = null;
                        rv.AccommodationUrlTag = (System.String)tmp;

    
                        retValMap[rv.Id] = rv;
                    }
                    reader.Close();
                    scope.Complete();

                    foreach (int id in scores)
                    {
                        retVal.Add(retValMap[id]);
                    }

                    queryMessage = string.Empty;

                    DateTime endTime = DateTime.Now;
                    if (autogenerated_Common_dblibrary.EnableProfiling
                        && autogenerated_Common_dblibrary.StoredProcedureEnd != null)
                    {
                        autogenerated_Common_dblibrary.StoredProcedureEnd("GetResults", endTime.Subtract(startTime).TotalMilliseconds);
                    }

                    return retVal;
                }
            }
        }


        #region async
        /// <summary>
        /// Preko ove metode se pokrece GetResults, ali asinkrono.
        /// Metodi se predaje delegat (callback) koji ce se pozvati kada se storica izvrsi.
        /// Unutar callback metode, potrebno je pozvati EndExecute da bi se dobio rezultat storice (ukoliko je doslo do greske, pozivanje EndExecute dize taj exception).
        /// </summary>
        public static IAsyncResult BeginExecute(System.String query, System.Int32? languageId, System.Int32? top, System.Int32? startRowIndex, System.Int32? maximumRows, System.Int32? orderBy,out System.String queryMessage, AsyncCallback callback, object state)
        {
            ExecuteDelegate delegat = Execute;
            AsyncState asyncState = new AsyncState();
            asyncState.delegat = delegat;
            asyncState.state = state;
            return delegat.BeginInvoke(query, languageId, top, startRowIndex, maximumRows, orderBy, out queryMessage, callback, asyncState);
        }
        /// <summary>
        /// result.AsyncState je <see cref="AsyncState"/> klasa, pa je potrebno castati u taj tip da bi do?li do vrijednosti koju smo poslali u <see cref="BeginExecute"/> metodu.
        /// </summary>
        /// <param name="result"></param>
        /// <returns></returns>
        public static List<GetResults.Ret> EndExecute(out System.String queryMessage, IAsyncResult result)
        {
            if (result != null)
            {
                // cekamo dok se ne zavrsi async operacija (ako je korisnik pozvao BeginExecute i EndExecute jedno iza drugog)
                result.AsyncWaitHandle.WaitOne();

                if (result.AsyncState != null && result.AsyncState is AsyncState)
                {
                    AsyncState state = (AsyncState)result.AsyncState;
                    // zovemo endinvoke i vracamo rezultat
                    return state.delegat.EndInvoke(out queryMessage, result);
                }
                else
                {
                    // result nije dobiven iz BeginExecute metode nego od negdje drugdje i nema sve sto bi trebao imati
                    throw new ArgumentException("Parametar result nije dobiven iz BeginExecute metode!", "result");
                }
            }
            else
            {
                throw new ArgumentNullException("result", "Parametar result ne smije biti null.");
            }
        }
        internal delegate List<GetResults.Ret> ExecuteDelegate(System.String query, System.Int32? languageId, System.Int32? top, System.Int32? startRowIndex, System.Int32? maximumRows, System.Int32? orderBym, out System.String queryMessage);
        public class AsyncState
        {
            internal ExecuteDelegate delegat;
            public object state;
        }
        #endregion

        #region transaction options
        private static IsolationLevel isolation = IsolationLevel.Unspecified;
        /// <summary>
        /// Dohvacanje nivoa izolacije transakcija.
        /// Ako se zeli overrajdati globalno ponasanje, potrebno je u partial klasi u statickom konstruktoru podesiti <see cref="isolation"/>.
        /// </summary>
        /// <returns></returns>
        private static IsolationLevel GetIsolationLevel()
        {
            if (isolation == IsolationLevel.Unspecified)
            {
                return autogenerated_Common_dblibrary.GetIsolationLevel();
            }
            else
            {
                return isolation;
            }
        }

        /// <summary>
        /// Oznaka da li je potrebna transakcija?
        /// Ako transakcija nije potrebna, ovo postaviti na <see cref="TransactionScopeOption.Suppress"/> u statickom konstruktoru u partial definiciji.
        /// Za select storice (koje pocinju sa 'ps') je default <see cref="TransactionScopeOption.Suppress"/> a za sve ostale <see cref="TransactionScopeOption.Required"/>
        /// </summary>
        private static TransactionScopeOption scopeOption = TransactionScopeOption.Required;
        #endregion
        #region command timeout
        /// <summary>
        /// Dohvacanje timeouta storice (SqlCommand.CommandTimeout) - u sekundama.
        /// Defaultna vrijednost vraca -1, sto znaci da se uzima sto god je defaultno za SqlCommand.CommandTimeout.
        /// 0 je beskonacno.
        /// </summary>
        private static int commandTimeout = -1;
        #endregion
        #region return values
        [Serializable]
        public class Ret
        {
            private System.Int32 _Id;
            /// <summary>
            /// int 
            /// </summary>
            public System.Int32 Id
            {
                get
                {
                    return _Id;
                }
                set
                {
                    _Id = value;
                }
            }
            private System.String _Title;
            /// <summary>
            /// nvarchar(250) 
            /// </summary>
            public System.String Title
            {
                get
                {
                    return _Title;
                }
                set
                {
                    _Title = value;
                }
            }
            private System.String _AccommType;
            /// <summary>
            /// nvarchar(2147483647) 
            /// </summary>
            public System.String AccommType
            {
                get
                {
                    return _AccommType;
                }
                set
                {
                    _AccommType = value;
                }
            }
            private System.Int32? _CapacityMin;
            /// <summary>
            /// nvarchar(2147483647) 
            /// </summary>
            public System.Int32? CapacityMin
            {
                get
                {
                    return _CapacityMin;
                }
                set
                {
                    _CapacityMin = value;
                }
            }
            private System.Int32? _CapacityMax;
            /// <summary>
            /// nvarchar(2147483647) 
            /// </summary>
            public System.Int32? CapacityMax
            {
                get
                {
                    return _CapacityMax;
                }
                set
                {
                    _CapacityMax = value;
                }
            }
            private System.Boolean _PlaceberryAdvert;
            /// <summary>
            /// nvarchar(2147483647) 
            /// </summary>
            public System.Boolean PlaceberryAdvert
            {
                get
                {
                    return _PlaceberryAdvert;
                }
                set
                {
                    _PlaceberryAdvert = value;
                }
            }
            private System.Int32? _AccommodationId;
            /// <summary>
            /// nvarchar(2147483647) 
            /// </summary>
            public System.Int32? AccommodationId
            {
                get
                {
                    return _AccommodationId;
                }
                set
                {
                    _AccommodationId = value;
                }
            }
            private System.Int32? _AgencyId;
            /// <summary>
            /// nvarchar(2147483647) 
            /// </summary>
            public System.Int32? AgencyId
            {
                get
                {
                    return _AgencyId;
                }
                set
                {
                    _AgencyId = value;
                }
            }
            private System.String _AgencyName;
            /// <summary>
            /// nvarchar(2147483647) 
            /// </summary>
            public System.String AgencyName
            {
                get
                {
                    return _AgencyName;
                }
                set
                {
                    _AgencyName = value;
                }
            }
            private System.Int32? _AdvertInfoId;
            /// <summary>
            /// nvarchar(2147483647) 
            /// </summary>
            public System.Int32? AdvertInfoId
            {
                get
                {
                    return _AdvertInfoId;
                }
                set
                {
                    _AdvertInfoId = value;
                }
            }
            private System.String _Description;
            /// <summary>
            /// nvarchar(2147483647) 
            /// </summary>
            public System.String Description
            {
                get
                {
                    return _Description;
                }
                set
                {
                    _Description = value;
                }
            }
            private System.Int32 _LanguageId;
            /// <summary>
            /// int 
            /// </summary>
            public System.Int32 LanguageId
            {
                get
                {
                    return _LanguageId;
                }
                set
                {
                    _LanguageId = value;
                }
            }

            private System.String _PictureUrl;
            /// <summary>
            /// nvarchar(1200) 
            /// </summary>
            public System.String PictureUrl
            {
                get
                {
                    return _PictureUrl;
                }
                set
                {
                    _PictureUrl = value;
                }
            }
            private System.Decimal? _Price;
            /// <summary>
            /// decimal(15, 2) 
            /// </summary>
            public System.Decimal? Price
            {
                get
                {
                    return _Price;
                }
                set
                {
                    _Price = value;
                }
            }
            private System.Decimal? _PriceOld;
            /// <summary>
            /// decimal(15, 2) 
            /// </summary>
            public System.Decimal? PriceOld
            {
                get
                {
                    return _PriceOld;
                }
                set
                {
                    _PriceOld = value;
                }
            }

            private System.String _Country;
            public System.String Country
            {
                get
                {
                    return _Country;
                }
                set
                {
                    _Country = value;
                }
            }
            private System.String _Region;
            public System.String Region
            {
                get
                {
                    return _Region;
                }
                set
                {
                    _Region = value;
                }
            }
            private System.String _Island;
            public System.String Island
            {
                get
                {
                    return _Island;
                }
                set
                {
                    _Island = value;
                }
            }
            private System.String _City;
            public System.String City
            {
                get
                {
                    return _City;
                }
                set
                {
                    _City = value;
                }
            }

            private System.Int32? _CurrencyId;
            /// <summary>
            /// int 
            /// </summary>
            public System.Int32? CurrencyId
            {
                get
                {
                    return _CurrencyId;
                }
                set
                {
                    _CurrencyId = value;
                }
            }
            private System.Int32? _AdvertRawId;
            /// <summary>
            /// int 
            /// </summary>
            public System.Int32? AdvertRawId
            {
                get
                {
                    return _AdvertRawId;
                }
                set
                {
                    _AdvertRawId = value;
                }
            }


            private System.String _SourceTitle;
            /// <summary>
            /// nvarchar(250) 
            /// </summary>
            public System.String SourceTitle
            {
                get
                {
                    return _SourceTitle;
                }
                set
                {
                    _SourceTitle = value;
                }
            }
            private System.String _SourceUrl;
            /// <summary>
            /// varchar(50) 
            /// </summary>
            public System.String SourceUrl
            {
                get
                {
                    return _SourceUrl;
                }
                set
                {
                    _SourceUrl = value;
                }
            }
            private System.String _CurrencySymbol;
            public System.String CurrencySymbol
            {
                get
                {
                    return _CurrencySymbol;
                }
                set
                {
                    _CurrencySymbol = value;
                }
            }


            private System.String _AgencyUrlTag;
            public System.String AgencyUrlTag
            {
                get
                {
                    return _AgencyUrlTag;
                }
                set
                {
                    _AgencyUrlTag = value;
                }
            }

            private System.String _AccommodationUrlTag;
            public System.String AccommodationUrlTag
            {
                get
                {
                    return _AccommodationUrlTag;
                }
                set
                {
                    _AccommodationUrlTag = value;
                }
            }


        }
        #endregion
    }
}
