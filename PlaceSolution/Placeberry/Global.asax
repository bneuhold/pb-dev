<%@ Application Language="C#" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Collections.Specialized" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Timers" %>
<%@ Import Namespace="UltimateDC" %>
<%@ Import Namespace="Placeberry.DAL" %>
<%@ Import Namespace="LibGoogleWeather" %>
<%@ Import Namespace="QueryRanking" %>

<script runat="server">
    
    //Refrešanje prognoze svakih 7 sati
    const int WEATHER_FETCH_INTERVAL = 7 * 60 * 60 * 1000;

    void Application_Start(object sender, EventArgs e) 
    {
        // Code that runs on application startup     
   
        autogenerated_Common_dblibrary.SetConnectionString(
            ConfigurationManager.ConnectionStrings["Placeberry_CS"].ConnectionString);

        //PokreniPrognozu();
        
        // Placeberry search setup.
        TextSimilarity.indexPath = Server.MapPath("/LuceneIndex");
        
        QueryRanking.Utility.SetConnectionString(
            ConfigurationManager.ConnectionStrings["Placeberry_CS"].ConnectionString);
        
        CachedRanker ranker = CachedRanker.Instance;
    }
    
    void Application_End(object sender, EventArgs e) 
    {
        //  Code that runs on application shutdown

    }
        
    void Application_Error(object sender, EventArgs e) 
    { 
        // Code that runs when an unhandled error occurs

    }

    void Application_BeginRequest(object sender, EventArgs e)
    {
        //if (HttpContext.Current.Request.Url.ToString().ToLower().Contains("http://placeberry.com"))
        //{
        //    HttpContext.Current.Response.Status = "301 Moved Permanently";
        //    HttpContext.Current.Response.AddHeader("Location", "http://www.placeberry.com" + Request.RawUrl);
        //}

    }

    void Session_Start(object sender, EventArgs e) 
    {
        // Code that runs when a new session is started

    }

    void Session_End(object sender, EventArgs e) 
    {
        // Code that runs when a session ends. 
        // Note: The Session_End event is raised only when the sessionstate mode
        // is set to InProc in the Web.config file. If session mode is set to StateServer 
        // or SQLServer, the event is not raised.

    }

    void PokreniPrognozu()
    {

        WeatherFetching();
        
        System.Timers.Timer timer = new System.Timers.Timer();

        timer.Interval = WEATHER_FETCH_INTERVAL;
        timer.Elapsed += new ElapsedEventHandler((a, b) =>
        {
            WeatherFetching();
        });
        timer.AutoReset = true;
        timer.Start();

        GC.KeepAlive(timer);

    }

    private static void WeatherFetching()
    {
        List<Place> places = new List<Place>();

        using (UltimateDataContext dc = new UltimateDataContext())
        {
            places = (from p in dc.UltimateTables
                      where (ObjectType)p.ObjectTypeId == ObjectType.CITY 
                      select new Place(p.Id, p.Title, HttpUtility.UrlEncode(p.Accuweather != null && p.Accuweather.Trim() != string.Empty ? p.Accuweather : p.Title))
                      ).ToList();
        }

        WeatherMaster.BeginFetchForecasts(places);
    }

       
</script>
